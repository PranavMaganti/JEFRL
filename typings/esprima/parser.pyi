"""
This type stub file was generated by pyright.
"""

from .objects import Object


class Value:
    def __init__(self, value) -> None: ...

class Params:
    def __init__(
        self,
        simple=...,
        message=...,
        stricted=...,
        firstRestricted=...,
        inFor=...,
        paramSet=...,
        params=...,
        get=...,
    ) -> None: ...

class Config(Object):
    def __init__(
        self,
        range=...,
        loc=...,
        source=...,
        tokens=...,
        comment=...,
        tolerant=...,
        **options,
    ) -> None: ...

class Context:
    def __init__(
        self,
        isModule=...,
        allowAwait=...,
        allowIn=...,
        allowStrictDirective=...,
        allowYield=...,
        firstCoverInitializedNameError=...,
        isAssignmentTarget=...,
        isBindingElement=...,
        inFunctionBody=...,
        inIteration=...,
        inSwitch=...,
        labelSet=...,
        strict=...,
    ) -> None: ...

class Marker:
    def __init__(self, index=..., line=..., column=...) -> None: ...

class TokenEntry(Object):
    def __init__(self, type=..., value=..., regex=..., range=..., loc=...) -> None: ...

class Parser:
    def __init__(self, code, options=..., delegate=...) -> None: ...
    def throwError(self, messageFormat, *args): ...
    def tolerateError(self, messageFormat, *args): ...
    def unexpectedTokenError(self, token=..., message=...): ...
    def throwUnexpectedToken(self, token=..., message=...): ...
    def tolerateUnexpectedToken(self, token=..., message=...): ...
    def collectComments(self): ...
    def getTokenRaw(self, token): ...
    def convertToken(self, token): ...
    def nextToken(self): ...
    def nextRegexToken(self): ...
    def createNode(self): ...
    def startNode(self, token, lastLineStart=...): ...
    def finalize(self, marker, node): ...
    def expect(self, value): ...
    def expectCommaSeparator(self): ...
    def expectKeyword(self, keyword): ...
    def match(self, *value): ...
    def matchKeyword(self, *keyword): ...
    def matchContextualKeyword(self, *keyword): ...
    def matchAssign(self): ...
    def isolateCoverGrammar(self, parseFunction): ...
    def inheritCoverGrammar(self, parseFunction): ...
    def consumeSemicolon(self): ...
    def parsePrimaryExpression(self): ...
    def parseSpreadElement(self): ...
    def parseArrayInitializer(self): ...
    def parsePropertyMethod(self, params): ...
    def parsePropertyMethodFunction(self): ...
    def parsePropertyMethodAsyncFunction(self): ...
    def parseObjectPropertyKey(self): ...
    def isPropertyKey(self, key, value): ...
    def parseObjectProperty(self, hasProto): ...
    def parseObjectInitializer(self): ...
    def parseTemplateHead(self): ...
    def parseTemplateElement(self): ...
    def parseTemplateLiteral(self): ...
    def reinterpretExpressionAsPattern(self, expr): ...
    def parseGroupExpression(self): ...
    def parseArguments(self): ...
    def isIdentifierName(self, token): ...
    def parseIdentifierName(self): ...
    def parseNewExpression(self): ...
    def parseAsyncArgument(self): ...
    def parseAsyncArguments(self): ...
    def matchImportCall(self): ...
    def parseImportCall(self): ...
    def parseLeftHandSideExpressionAllowCall(self): ...
    def parseSuper(self): ...
    def parseLeftHandSideExpression(self): ...
    def parseUpdateExpression(self): ...
    def parseAwaitExpression(self): ...
    def parseUnaryExpression(self): ...
    def parseExponentiationExpression(self): ...
    def binaryPrecedence(self, token): ...
    def parseBinaryExpression(self): ...
    def parseConditionalExpression(self): ...
    def checkPatternParam(self, options, param): ...
    def reinterpretAsCoverFormalsList(self, expr): ...
    def parseAssignmentExpression(self): ...
    def parseExpression(self): ...
    def parseStatementListItem(self): ...
    def parseBlock(self): ...
    def parseLexicalBinding(self, kind, options): ...
    def parseBindingList(self, kind, options): ...
    def isLexicalDeclaration(self): ...
    def parseLexicalDeclaration(self, options): ...
    def parseBindingRestElement(self, params, kind=...): ...
    def parseArrayPattern(self, params, kind=...): ...
    def parsePropertyPattern(self, params, kind=...): ...
    def parseRestProperty(self, params, kind): ...
    def parseObjectPattern(self, params, kind=...): ...
    def parsePattern(self, params, kind=...): ...
    def parsePatternWithDefault(self, params, kind=...): ...
    def parseVariableIdentifier(self, kind=...): ...
    def parseVariableDeclaration(self, options): ...
    def parseVariableDeclarationList(self, options): ...
    def parseVariableStatement(self): ...
    def parseEmptyStatement(self): ...
    def parseExpressionStatement(self): ...
    def parseIfClause(self): ...
    def parseIfStatement(self): ...
    def parseDoWhileStatement(self): ...
    def parseWhileStatement(self): ...
    def parseForStatement(self): ...
    def parseContinueStatement(self): ...
    def parseBreakStatement(self): ...
    def parseReturnStatement(self): ...
    def parseWithStatement(self): ...
    def parseSwitchCase(self): ...
    def parseSwitchStatement(self): ...
    def parseLabelledStatement(self): ...
    def parseThrowStatement(self): ...
    def parseCatchClause(self): ...
    def parseFinallyClause(self): ...
    def parseTryStatement(self): ...
    def parseDebuggerStatement(self): ...
    def parseStatement(self): ...
    def parseFunctionSourceElements(self): ...
    def validateParam(self, options, param, name): ...
    def parseRestElement(self, params): ...
    def parseFormalParameter(self, options): ...
    def parseFormalParameters(self, firstRestricted=...): ...
    def matchAsyncFunction(self): ...
    def parseFunctionDeclaration(self, identifierIsOptional=...): ...
    def parseFunctionExpression(self): ...
    def parseDirective(self): ...
    def parseDirectivePrologues(self): ...
    def qualifiedPropertyName(self, token): ...
    def parseGetterMethod(self): ...
    def parseSetterMethod(self): ...
    def parseGeneratorMethod(self): ...
    def isStartOfExpression(self): ...
    def parseYieldExpression(self): ...
    def parseClassElement(self, hasConstructor): ...
    def parseClassElementList(self): ...
    def parseClassBody(self): ...
    def parseClassDeclaration(self, identifierIsOptional=...): ...
    def parseClassExpression(self): ...
    def parseModule(self): ...
    def parseScript(self): ...
    def parseModuleSpecifier(self): ...
    def parseImportSpecifier(self): ...
    def parseNamedImports(self): ...
    def parseImportDefaultSpecifier(self): ...
    def parseImportNamespaceSpecifier(self): ...
    def parseImportDeclaration(self): ...
    def parseExportSpecifier(self): ...
    def parseExportDefaultSpecifier(self): ...
    def parseExportDeclaration(self): ...
