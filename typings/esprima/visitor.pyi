"""
This type stub file was generated by pyright.
"""

from .compat import PY3


class VisitRecursionError(Exception): ...

class Visited:
    def __init__(self, result) -> None: ...

class Visitor:
    """
    An Object visitor base class that walks the abstract syntax tree and calls a
    visitor function for every Object found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the Object.  So a `Module` Object visit function would
    be `visit_Module`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a Object
    (return value `None`) the `generic_visit` visitor is used instead.
    """

    def __call__(self, obj, metadata): ...
    def transform(self, obj, metadata):  # -> Any | Object:
        """Transform an Object."""
        ...
    def transform_Object(self, obj, metadata):
        """Called if no explicit transform function exists for an Object."""
        ...
    def generic_visit(self, obj): ...
    def visit(self, obj):
        """Visit a Object."""
        ...
    def visit_RecursionError(self, obj): ...
    def visit_Object(self, obj):  # -> Generator[Unknown | Visited, Any, None]:
        """Called if no explicit visitor function exists for an Object."""
        ...
    def visit_Generic(self, obj):  # -> Generator[Visited, Any, None]:
        """Called if no explicit visitor function exists for an object."""
        ...
    def visit_list(self, obj): ...

    visit_Array = ...
    def visit_dict(self, obj): ...

class NodeVisitor(Visitor): ...

class ReprVisitor(Visitor):
    def visit(self, obj, indent=..., nl=..., sp=..., skip=...): ...
    def visit_RecursionError(self, obj): ...
    def visit_Object(self, obj): ...
    def visit_Generic(self, obj): ...
    def visit_list(self, obj): ...

    visit_Array = ...
    def visit_dict(self, obj): ...

    if PY3:
        def visit_str(self, obj): ...

    else:
        def visit_unicode(self, obj): ...

    def visit_SourceLocation(self, obj): ...

class ToDictVisitor(Visitor):
    map = ...
    def visit_RecursionError(self, obj): ...
    def visit_Object(self, obj): ...
    def visit_list(self, obj): ...

    visit_Array = ...
    def visit_dict(self, obj): ...
    def visit_SRE_Pattern(self, obj): ...
