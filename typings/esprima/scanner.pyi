"""
This type stub file was generated by pyright.
"""

from .objects import Object

def hexValue(ch): # -> int:
    ...

def octalValue(ch): # -> int:
    ...

class RegExp(Object):
    def __init__(self, pattern=..., flags=...) -> None:
        ...
    


class Position(Object):
    def __init__(self, line=..., column=..., offset=...) -> None:
        ...
    


class SourceLocation(Object):
    def __init__(self, start=..., end=..., source=...) -> None:
        ...
    


class Comment(Object):
    def __init__(self, multiLine=..., slice=..., range=..., loc=...) -> None:
        ...
    


class RawToken(Object):
    def __init__(self, type=..., value=..., pattern=..., flags=..., regex=..., octal=..., cooked=..., head=..., tail=..., lineNumber=..., lineStart=..., start=..., end=...) -> None:
        ...
    


class ScannerState(Object):
    def __init__(self, index=..., lineNumber=..., lineStart=...) -> None:
        ...
    


class Octal:
    def __init__(self, octal, code) -> None:
        ...
    


class Scanner:
    def __init__(self, code, handler) -> None:
        ...
    
    def saveState(self): # -> ScannerState:
        ...
    
    def restoreState(self, state): # -> None:
        ...
    
    def eof(self): # -> bool:
        ...
    
    def throwUnexpectedToken(self, message=...):
        ...
    
    def tolerateUnexpectedToken(self, message=...): # -> None:
        ...
    
    def skipSingleLineComment(self, offset): # -> list[Unknown]:
        ...
    
    def skipMultiLineComment(self): # -> list[Unknown]:
        ...
    
    def scanComments(self): # -> list[Unknown]:
        ...
    
    def isFutureReservedWord(self, id): # -> bool:
        ...
    
    def isStrictModeReservedWord(self, id): # -> bool:
        ...
    
    def isRestrictedWord(self, id): # -> bool:
        ...
    
    def isKeyword(self, id): # -> bool:
        ...
    
    def codePointAt(self, i):
        ...
    
    def scanHexEscape(self, prefix): # -> None:
        ...
    
    def scanUnicodeCodePointEscape(self):
        ...
    
    def getIdentifier(self):
        ...
    
    def getComplexIdentifier(self):
        ...
    
    def octalToDecimal(self, ch): # -> Octal:
        ...
    
    def scanIdentifier(self): # -> RawToken:
        ...
    
    def scanPunctuator(self): # -> RawToken:
        ...
    
    def scanHexLiteral(self, start): # -> RawToken:
        ...
    
    def scanBinaryLiteral(self, start): # -> RawToken:
        ...
    
    def scanOctalLiteral(self, prefix, start): # -> RawToken:
        ...
    
    def isImplicitOctalLiteral(self): # -> bool:
        ...
    
    def scanNumericLiteral(self): # -> RawToken:
        ...
    
    def scanStringLiteral(self): # -> RawToken:
        ...
    
    def scanTemplate(self): # -> RawToken:
        ...
    
    def testRegExp(self, pattern, flags): # -> Pattern[str] | None:
        ...
    
    def scanRegExpBody(self):
        ...
    
    def scanRegExpFlags(self): # -> LiteralString | Literal['']:
        ...
    
    def scanRegExp(self): # -> RawToken:
        ...
    
    def lex(self): # -> RawToken:
        ...
    


