"""
This type stub file was generated by pyright.
"""

from .objects import Object


def hexValue(ch): ...
def octalValue(ch): ...

class RegExp(Object):
    def __init__(self, pattern=..., flags=...) -> None: ...

class Position(Object):
    def __init__(self, line=..., column=..., offset=...) -> None: ...

class SourceLocation(Object):
    def __init__(self, start=..., end=..., source=...) -> None: ...

class Comment(Object):
    def __init__(self, multiLine=..., slice=..., range=..., loc=...) -> None: ...

class RawToken(Object):
    def __init__(
        self,
        type=...,
        value=...,
        pattern=...,
        flags=...,
        regex=...,
        octal=...,
        cooked=...,
        head=...,
        tail=...,
        lineNumber=...,
        lineStart=...,
        start=...,
        end=...,
    ) -> None: ...

class ScannerState(Object):
    def __init__(self, index=..., lineNumber=..., lineStart=...) -> None: ...

class Octal:
    def __init__(self, octal, code) -> None: ...

class Scanner:
    def __init__(self, code, handler) -> None: ...
    def saveState(self): ...
    def restoreState(self, state): ...
    def eof(self): ...
    def throwUnexpectedToken(self, message=...): ...
    def tolerateUnexpectedToken(self, message=...): ...
    def skipSingleLineComment(self, offset): ...
    def skipMultiLineComment(self): ...
    def scanComments(self): ...
    def isFutureReservedWord(self, id): ...
    def isStrictModeReservedWord(self, id): ...
    def isRestrictedWord(self, id): ...
    def isKeyword(self, id): ...
    def codePointAt(self, i): ...
    def scanHexEscape(self, prefix): ...
    def scanUnicodeCodePointEscape(self): ...
    def getIdentifier(self): ...
    def getComplexIdentifier(self): ...
    def octalToDecimal(self, ch): ...
    def scanIdentifier(self): ...
    def scanPunctuator(self): ...
    def scanHexLiteral(self, start): ...
    def scanBinaryLiteral(self, start): ...
    def scanOctalLiteral(self, prefix, start): ...
    def isImplicitOctalLiteral(self): ...
    def scanNumericLiteral(self): ...
    def scanStringLiteral(self): ...
    def scanTemplate(self): ...
    def testRegExp(self, pattern, flags): ...
    def scanRegExpBody(self): ...
    def scanRegExpFlags(self): ...
    def scanRegExp(self): ...
    def lex(self): ...
