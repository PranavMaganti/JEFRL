"""
This type stub file was generated by pyright.
"""

from .parser import Parser


class MetaJSXElement:
    def __init__(self, node=..., opening=..., closing=..., children=...) -> None: ...

class JSXToken:
    Identifier = ...
    Text = ...

class RawJSXToken:
    def __init__(
        self, type=..., value=..., lineNumber=..., lineStart=..., start=..., end=...
    ) -> None: ...

def getQualifiedElementName(elementName): ...

class JSXParser(Parser):
    def __init__(self, code, options, delegate) -> None: ...
    def parsePrimaryExpression(self): ...
    def startJSX(self): ...
    def finishJSX(self): ...
    def reenterJSX(self): ...
    def createJSXNode(self): ...
    def createJSXChildNode(self): ...
    def scanXHTMLEntity(self, quote): ...
    def lexJSX(self): ...
    def nextJSXToken(self): ...
    def nextJSXText(self): ...
    def peekJSXToken(self): ...
    def expectJSX(self, value): ...
    def matchJSX(self, *value): ...
    def parseJSXIdentifier(self): ...
    def parseJSXElementName(self): ...
    def parseJSXAttributeName(self): ...
    def parseJSXStringLiteralAttribute(self): ...
    def parseJSXExpressionAttribute(self): ...
    def parseJSXAttributeValue(self): ...
    def parseJSXNameValueAttribute(self): ...
    def parseJSXSpreadAttribute(self): ...
    def parseJSXAttributes(self): ...
    def parseJSXOpeningElement(self): ...
    def parseJSXBoundaryElement(self): ...
    def parseJSXEmptyExpression(self): ...
    def parseJSXExpressionContainer(self): ...
    def parseJSXChildren(self): ...
    def parseComplexJSXElement(self, el): ...
    def parseJSXElement(self): ...
    def parseJSXRoot(self): ...
    def isStartOfExpression(self): ...
